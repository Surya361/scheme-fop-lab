(define (make-family father son-1 son-2)
	(list father son-1 son-2))
(define (get-father family)
	(car family))
(define (get-son1-family family)
	(cadr family))
(define (get-son2-family family)
	(caddr family))
(define (decendents? family)
	(and (null? get-son1-family family) (null? get-son2-family family)))
(define (empty-family? family)
	(null? family))
(define (desendent-person person family)
	(cond ((empty-family? family) '())
		((equal? (get-father family) person) (list (get-son1-family family) (get-son2-family family)))
		(else (append (desendent-person  person (get-son1-family family)) (desendent-person person (get-son2-family family))))))
(10 (3 (5 (1 () ()) (2 () ())) ())  (1 () ())))
