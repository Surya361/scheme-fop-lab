(define (make-empty-bst) '())
(define (empty-bst? bst) (null? bst))
(define (make-bst val ls rs)(list val ls rs) )
(define (bst-v bst)(car bst))
(define (bst-ls bst)(cadr bst))
(define (bst-rs bst)(caddr bst))
(define (leaf-bst? bst)(and (empty-bst? (bst-rs bst)) (empty-bst? (bst-ls bst))))
(define (size-bst bst)
	(cond ((empty-bst? bst) 0)
		    (else (+ 1 (size-bst (bst-ls bst)) (size-bst (bst-rs bst))))))
(define (insert-bst bst val)
	(cond ((empty-bst? bst)(make-bst val '() '()))
		((> (bst-v bst) val)(make-bst (bst-v bst) (insert-bst (bst-ls bst) val) (bst-rs bst)))
		((< (bst-v bst) val)(make-bst (bst-v bst) (bst-ls bst) (insert-bst (bst-rs bst) val)))))
(define (right-most bst)
	(cond ((and (empty-bst? (bst-rs bst)) (empty-bst? (bst-ls bst))) (bst-v bst))
		   (else (right-most (bst-rs bst)))))
(define (left-most bst)
	(cond ((and (empty-bst? (bst-rs bst)) (empty-bst? (bst-ls bst))) (bst-v bst))
		   (else (left-most (bst-ls bst)))))		   				    